#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолноеОписаниеКвестаПоСсылке(Ссылка) Экспорт
	СтруктураВозврата = Новый Структура("Ссылка, Содержание, 
										|СтоимостьЗолото, СтоимостьСеребро, 
										|МатериалыПеред, МатериалПосле
										|МодификаторыСтоимости");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Квесты.Ссылка,
				   |	Квесты.Содержание,
				   |	Квесты.СтоимостьЗолото,
				   |	Квесты.СтоимостьСеребро,
				   |	Квесты.ДопМатериалПеред.Наименование КАК ДопМатериалПередНаименование,
				   |	Квесты.ДопМатериалПеред.СсылкаНаМатериал КАК ДопМатериалПередСсылкаНаМатериал,
				   |	Квесты.ДопМатериалПосле.Наименование КАК ДопМатериалПослеНаименование,
				   |	Квесты.ДопМатериалПосле.СсылкаНаМатериал КАК ДопМатериалПослеСсылкаНаМатериал,
				   |	Квесты.МодификаторыСтоимости.(
				   |		Модификатор.Наименование,
				   |		Модификатор.СтоимостьЗолото,
				   |		Модификатор.СтоимостьСеребро,
				   |		Модификатор.Штраф КАК ЭтоШтраф)
				   |ИЗ
				   |	Справочник.Квесты КАК Квесты";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка, , "МодификаторыСтоимости");
		ЗаполнитьМатериалы(СтруктураВозврата, Выборка, "МатериалыПеред");
		ЗаполнитьМатериалы(СтруктураВозврата, Выборка, "МатериалПосле");
		ЗаполнитьМодификаторы(СтруктураВозврата, Выборка);
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

Процедура ЗаполнитьМодификаторы(СтруктураВозврата, Выборка)
	СтруктураВозврата.МодификаторыСтоимости = Новый Массив;
	ВыборкаМодификаторов = Выборка.МодификаторыСтоимости;
	Пока ВыборкаМодификаторов.Следующий() Цикл
		СтруктураМодификатора = Новый Структура("Наименование, СтоимостьЗолото, СтоимостьСеребро, ЭтоШтраф");
		ЗаполнитьЗначенияСвойств(СтруктураМодификатора, ВыборкаМодификаторов);
		СтруктураВозврата.МодификаторыСтоимости.Добавить(СтруктураМодификатора);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьМатериалы(СтруктураВозврата, Выборка, Материалы)
	НаименованиеМатериалы = СтрШаблон("Доп%1Наименование", Материалы);
	СсылкаМатериалы = СтрШаблон("Доп%1СсылкаНаМатериал", Материалы);
	Если ЗначениеЗаполнено(Выборка[НаименованиеМатериалы]) Тогда
		СтруктураВозврата[Материалы] = Новый Структура("Наименование, Ссылка", Выборка[НаименованиеМатериалы],
			Выборка[СсылкаМатериалы]);
	КонецЕсли;
КонецПроцедуры

// Возвращает описание квеста по переданной ссылке
//
// Параметры:
//  Ссылка - СправочникСсылка.Квесты - квест, описание которого нужно вернуть
//							
// Возвращаемое значение:
//  Структура
//  	Сообщение - Сообщение для вывода в телеграмм
//  	Команды - Массив структур
//  				Наименование - Представление команды
//  				id - идентификатор команды
//  				url - Ссылка навнешний ресурс
//
Функция ОписаниеКвестаПоСсылке(Ссылка) Экспорт
	СтруктураВозврата = ОбщийМодульСервер.СтруктураВозвратаДляТГ_СообщениеКоманды();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Квесты.Наименование,
				   |	Квесты.Содержание,
				   |	Квесты.СтоимостьЗолото,
				   |	Квесты.СтоимостьСеребро,
				   |	Квесты.ДопМатериалПеред.СсылкаНаМатериал КАК ДопМатериалПередСсылкаНаМатериал,
				   |	Квесты.ДопМатериалПеред,
				   |	КвестыПользователейСрезПоследних.Состояние
				   |ИЗ
				   |	Справочник.Квесты КАК Квесты
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КвестыПользователей.СрезПоследних(, Квест = &Ссылка) КАК
				   |			КвестыПользователейСрезПоследних
				   |		ПО Квесты.Ссылка = КвестыПользователейСрезПоследних.Квест
				   |ГДЕ
				   |	Квесты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ШаблонТекста = "Задача: %1
					   |Вам необходимо: %2
					   |Стоимость задачи: %4 золота, %5 серебра
					   |%3";
		Если НЕ ЗначениеЗаполнено(Выборка.ДопМатериалПередСсылкаНаМатериал) Тогда
			ДопМатериалы = "";
		Иначе	
			ДопМатериалы = СтрШаблон("Перед выполнением, рекомендую ознакомиться с доп. материалами: %1",
										Выборка.ДопМатериалПередСсылкаНаМатериал);
			ЗаполнитьКомандыПоИнфоссылкам(Выборка, СтруктураВозврата);
		КонецЕсли;										
		Описание = СтрШаблон(ШаблонТекста, Выборка.Наименование, Выборка.Содержание, ДопМатериалы,
			Выборка.СтоимостьЗолото, Выборка.СтоимостьСеребро, );
		СтруктураВозврата.Сообщение = Описание;
		Если Выборка.Состояние = Перечисления.СостоянияКвеста.Выдан Тогда
			СтруктураВозврата.Команды.Добавить(ОписаниеКомандыВзятьВРаботу());
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияКвеста.Выполняется Тогда
			СтруктураВозврата.Команды.Добавить(ОписаниеКомандыВыполнено());
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураВозврата;

КонецФункции

Процедура ЗаполнитьКомандыПоИнфоссылкам(Выборка, СтруктураВозврата)
	ЗапросКСсылкам = Новый Запрос;
	ЗапросКСсылкам.Текст = "ВЫБРАТЬ
	|	ДополинительныеМатериалыКвестовПереченьМатериалов.Название,
	|	ДополинительныеМатериалыКвестовПереченьМатериалов.Гипперссылка
	|ИЗ
	|	Справочник.ДополинительныеМатериалыКвестов.ПереченьМатериалов КАК ДополинительныеМатериалыКвестовПереченьМатериалов
	|ГДЕ
	|	ДополинительныеМатериалыКвестовПереченьМатериалов.Ссылка = &ДопМатериалПеред";
	ЗапросКСсылкам.УстановитьПараметр("ДопМатериалПеред", Выборка.ДопМатериалПеред);
	ВыборкаДопМатериалов = ЗапросКСсылкам.Выполнить().Выбрать();
	Пока ВыборкаДопМатериалов.Следующий() Цикл
		СтруктураВозврата.Команды.Добавить(ОписаниеКомандыПоИнфоссылке(ВыборкаДопМатериалов));
	КонецЦикла;
КонецПроцедуры

Функция ОписаниеСтруктурыКоманды()
	Возврат Новый Структура("Наименование, id, url", "", "", "");
КонецФункции

Функция ОписаниеКомандыПоИнфоссылке(ВыборкаДопМатериалов)
	СтруктураКоманды = ОписаниеСтруктурыКоманды();
	СтруктураКоманды.Наименование = ВыборкаДопМатериалов.Название;
	СтруктураКоманды.url = ВыборкаДопМатериалов.Гипперссылка;
	Возврат СтруктураКоманды;
КонецФункции

Функция ОписаниеКомандыВыполнено()
	СтруктураКоманды = ОписаниеСтруктурыКоманды();
	СтруктураКоманды.Наименование = "Выполнено";
	СтруктураКоманды.id = "Выполнено";
	Возврат СтруктураКоманды;
КонецФункции

Функция ОписаниеКомандыВзятьВРаботу()
	СтруктураКоманды = ОписаниеСтруктурыКоманды();
	СтруктураКоманды.Наименование = "Взять в работу";
	СтруктураКоманды.id = "ВзятьВРаботу";
	Возврат СтруктураКоманды;
КонецФункции

// Выполняет переданную команду, возвращает сообщение и список доступных команд
//
// Параметры:
//  Ссылка - СправочникСсылка.Квесты - квест, над которым выполняется действие
//  Команда - Строка - Идентификатор команды "ВзятьВРаботу" или "Выполнено"
//							
// Возвращаемое значение:
//  Структура
//  	Сообщение - Сообщение для вывода в телеграмм
//  	Команды - Массив структур
//  				Наименование - Представление команды
//  				id - идентификатор команды
//
Функция ВыполнитьКоманду(Ссылка, Команда) Экспорт
	СтруктураВозврата = ОбщийМодульСервер.СтруктураВозвратаДляТГ_СообщениеКоманды();
	ДанныеКвеста = ДанныеКвестаПоСсылке(Ссылка);
	ДокументПоКвесту = ДанныеКвеста.ДокументПоКвесту;

	Если ДокументПоКвесту = Неопределено Тогда
		СтруктураВозврата.Сообщение = "Не найден регистратор";
		Возврат СтруктураВозврата;
	КонецЕсли;

	Если Команда = "ВзятьВРаботу" Тогда
		ВыполнитьКомандуВзятьВРаботу(СтруктураВозврата, ДокументПоКвесту);
	ИначеЕсли Команда = "Выполнено" Тогда
		ВыполнитьКомандуВыполнено(СтруктураВозврата, ДанныеКвеста);
	Иначе
		СтруктураВозврата.Сообщение = "Неизвестная команда";
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

Процедура ВыполнитьКомандуВзятьВРаботу(СтруктураВозврата, ДокументПоКвесту)
	ДокументОбъект = ДокументПоКвесту.ПолучитьОбъект();
	ДокументОбъект.ДатаВзятВРаботу = ТекущаяДата();
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СтруктураВозврата.Сообщение = "Задание взято в работу. Приступайте!";
		СтруктураВозврата.Команды.Добавить(ОписаниеКомандыВыполнено());
	Исключение
		СтруктураВозврата.Сообщение = "Что-то пошло не так :(";
		ЗаписьЖурналаРегистрации("Взять задание в работу ТГ", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.КвестПользователю, ДокументПоКвесту, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьКомандуВыполнено(СтруктураВозврата, ДанныеКвеста)
	ДокументОбъект = ДанныеКвеста.ДокументПоКвесту.ПолучитьОбъект();
	ДокументОбъект.ДатаВыполнения = ТекущаяДата();
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СтруктураВозврата.Сообщение = ?(ЗначениеЗаполнено(ДанныеКвеста.МатериалыПосле), ДанныеКвеста.МатериалыПосле,
			СообщениеВыполненоПоУмолчанию());
	Исключение
		СтруктураВозврата.Сообщение = "Что-то пошло не так :(";
		ЗаписьЖурналаРегистрации("Выполнить задание ТГ", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.КвестПользователю, ДанныеКвеста.ДокументПоКвесту, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Функция СообщениеВыполненоПоУмолчанию()
	Возврат "Отлично! Хорошая работа!"
КонецФункции

Функция ДанныеКвестаПоСсылке(Ссылка)
	СтруктураВозврата = Новый Структура("ДокументПоКвесту, МатериалыПосле");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	КвестыПользователейСрезПоследних.Регистратор,
				   |	КвестыПользователейСрезПоследних.Квест.ДопМатериалПосле.СсылкаНаМатериал КАК МатериалыПосле
				   |ИЗ
				   |	РегистрСведений.КвестыПользователей.СрезПоследних(, Квест = &Квест) КАК КвестыПользователейСрезПоследних";
	Запрос.УстановитьПараметр("Квест", Ссылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтруктураВозврата.ДокументПоКвесту = Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата.ДокументПоКвесту = Выборка.Регистратор;
		СтруктураВозврата.МатериалыПосле = Выборка.МатериалыПосле;
	КонецЕсли;
	Возврат СтруктураВозврата
КонецФункции
#КонецЕсли